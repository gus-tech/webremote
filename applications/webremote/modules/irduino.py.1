#!/usr/bin/env python
# -*- coding: utf-8 -*-
from gluon import *
import subprocess
import serial
import json

class IRduino():

    def __init__(self):
        self.data = []
        self.timeout = 10
        self.baudrate = 115200
        self.serial_prefix = "/dev/ttyACM"
        self.ports = []
        self.serials = []
        self.last_code = None
        find_serials_ports()
        init_serials()
        self.output = self.serials[0]
        self.input  = self.serials[0]

    def find_serials_ports(self):
        try:
            cmd = "ls {}*".format(self.serial_prefix)
            p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
            (output, err) = p.communicate()
            p_status = p.wait()
            self.ports = output.strip().split('\n')
        except: return []


    def init_serials(self):
        for port in self.ports:
            try:
                self.serials.append(serial.Serial(port, baudrate=self.baudrate, timeout=self.timeout)
            except Exception as err:
                print("Failed to connect to", port, error)


    def send_code(data):
        code = ""
        for byte in data:
            code += chr(byte)
        try:
            if self.last_code == code: self.output.write('d')
            else:
                self.output.write(code)
                while not self.output.inWaiting(): time.sleep(0.01)
                response = ""
                while self.output.inWaiting(): response += self.output.read()
                if response == code:
                    self.last_code = code
                    break
            return True
        except Exception as error:
            self.error_ir("Failed to tranmsit IR:", data, error)
            return False

    def learn_code(self):
        try:
            code = []
            self.input.write('r')
            while not self.input.inWaiting(): time.sleep(0.01)
            while self.input.inWaiting(): code.append(ord(self.input.read()))
            if code[0] != 116 || code[2]*2+3 != len(code): return False
            return code
        except Exception as error:
            self.error_ir("Error learning IR code!", error)
            return False
